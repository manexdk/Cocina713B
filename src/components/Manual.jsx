// src/components/Manual.jsx

import { useState } from "react";

const modulos = [
  { nombre: "üìã Inventario (ProductList)", descripcion: "Visualiza todo el inventario. Filtros por categor√≠a, ubicaci√≥n, b√∫squeda. Muestra cantidades, caducidad y favoritos." },
  { nombre: "‚ûï Agregar producto (ProductForm)", descripcion: "Formulario elegante para agregar productos, categor√≠as, fecha de caducidad y precio." },
  { nombre: "üìÖ Resumen mensual", descripcion: "Estad√≠sticas de consumo, gastos por mes, productos m√°s usados." },
  { nombre: "üìà Gr√°ficos y estad√≠sticas", descripcion: "Gr√°ficos de pastel y barras. Muestra top categor√≠as, favoritos, historial de gastos." },
  { nombre: "üõçÔ∏è Lista de compras", descripcion: "Crea y exporta listas de compra, detecta productos faltantes." },
  { nombre: "üîî Alertas", descripcion: "Alerta productos pr√≥ximos a vencer, con colores y notificaciones." },
  { nombre: "üïì Historial", descripcion: "Registro completo de movimientos: agregado, consumido, revertido." },
  { nombre: "‚≠ê Favoritos", descripcion: "Marca productos favoritos para acceso r√°pido." },
  { nombre: "üîÑ Import / Export", descripcion: "Importa desde Excel / Exporta listas e inventario." },
  { nombre: "‚öôÔ∏è Configuraci√≥n", descripcion: "Personaliza categor√≠as, ubicaciones, idioma, unidades, dark-mode." },
  { nombre: "üç≥ Recetas (con IA)", descripcion: "Agrega recetas propias o IA sugiere en base a inventario. Vincula con meal planner." },
  { nombre: "üóìÔ∏è Calendario de consumo", descripcion: "Planifica consumo, exporta a Google Calendar." },
  { nombre: "üí∞ Comparador de precios", descripcion: "Registra precios en diferentes tiendas. Compara y optimiza compras." },
  { nombre: "üìÖ Planificador de compras", descripcion: "Sugiere compras basadas en consumo promedio." },
  { nombre: "üçΩÔ∏è Meal Planner", descripcion: "Planifica comidas semanales. Descarga ingredientes del inventario." },
  { nombre: "üè∑Ô∏è Ubicaciones", descripcion: "Organiza por ubicaci√≥n f√≠sica: despensa, freezer, ba√±o, etc." },
  { nombre: "üë• Usuarios y roles", descripcion: "Gesti√≥n de usuarios, permisos, historial." },
  { nombre: "üìé Adjuntos", descripcion: "Adjunta boletas de compra. Controla gastos reales." },
  { nombre: "ü§ù Colaborativo", descripcion: "Modo grupo: inventario compartido, chat, minijuegos, QR, listas secretas." },
  { nombre: "üé§ Esc√°ner por voz", descripcion: "Agrega productos dictando en voz alta. M√≥vil y desktop." },
  { nombre: "ü§ñ Bot de consejos IA", descripcion: "Bot que responde a preguntas. Tips autom√°ticos y chat con IA." },
  { nombre: "üéâ Modo Fiesta", descripcion: "Organiza eventos, asigna productos, genera lista de fiesta." },
  { nombre: "üéÆ Minijuegos", descripcion: "Incluye memoria, adivina el producto, ruleta de tareas, pago la ronda, ranking." },
  { nombre: "üîç QR y listas", descripcion: "Genera QR para compartir listas o eventos." }
];

export default function Manual() {
  const [activo, setActivo] = useState(null);
  const [busqueda, setBusqueda] = useState("");

  const modFiltrados = modulos.filter(mod =>
    mod.nombre.toLowerCase().includes(busqueda.toLowerCase()) ||
    mod.descripcion.toLowerCase().includes(busqueda.toLowerCase())
  );

  const scrollToModulo = (nombre) => {
    const el = document.getElementById(nombre);
    if (el) el.scrollIntoView({ behavior: "smooth", block: "start" });
  };

  return (
    <div className="card max-w-4xl mx-auto">
      <h2 className="text-xl mb-4">üìñ Manual de Inventario 713</h2>

      <input
        type="text"
        value={busqueda}
        onChange={e => setBusqueda(e.target.value)}
        placeholder="üîç Buscar m√≥dulo o funci√≥n..."
        className="border border-gray-300 rounded px-3 py-2 w-full mb-4 text-sm"
      />

      <div className="mb-4">
        <h3 className="text-md font-bold mb-2">üóÇÔ∏è √çndice</h3>
        <div className="flex flex-wrap gap-2">
          {modFiltrados.map((mod, i) => (
            <button
              key={i}
              onClick={() => scrollToModulo(mod.nombre)}
              className="bg-gray-200 hover:bg-gray-300 text-gray-700 rounded px-2 py-1 text-xs"
            >
              {mod.nombre}
            </button>
          ))}
        </div>
      </div>

      {modFiltrados.length === 0 && (
        <div className="text-gray-500 text-sm mb-4">‚ö†Ô∏è No se encontraron resultados.</div>
      )}

      {modFiltrados.map((mod, i) => (
        <div
          key={i}
          id={mod.nombre}
          className="border-b border-gray-200 py-2 scroll-mt-24"
        >
          <button
            onClick={() => setActivo(activo === mod.nombre ? null : mod.nombre)}
            className="w-full text-left text-gray-700 font-bold flex justify-between items-center"
          >
            <span>{mod.nombre}</span>
            <span>{activo === mod.nombre ? "‚ñ≤" : "‚ñº"}</span>
          </button>
          {activo === mod.nombre && (
            <div className="mt-2 text-gray-600 text-sm animate-fade-in">
              {mod.descripcion}
            </div>
          )}
        </div>
      ))}
    </div>
  );
}
